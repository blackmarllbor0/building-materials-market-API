openapi: 3.0.0
info:
  title: builder-materials-market
  description: Online store for purchasing various building materials from various
    companies.yaml.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1/
    description: Main application server.
tags:
  - name: no-auth
    description: Methods available without authorization.
  - name: admin
    description: methods for administrator
  - name: customer
    description: methods for customer
  - name: user-role
    description: Manage user roles for administrator.
  - name: user-status
    description: Manage user status for administrator.
  - name: user
    description: Custom data management and administrative panel.
  - name: order-status
    description: Manage order statues for administrator.
  - name: category
    description: Manage category for administrator and viewing for user.
  - name: company
    description: All information about the company and data management by the administrator.
  - name: product
    description: All information about products of different companies and administration.
  - name: order-payment-type
    description: Manage order payment type for administrator.
  - name: auth-audit-event
    description: Manage audit event for administrator.
  - name: auth
    description: Login management methods.
  - name: order
    description: User order management methods.
  - name: feedback
    description: User feedback management methods.
  - name: order-detail
    description: User order detail management methods.
  - name: session
    description: User session management methods.
  - name: delivery
    description: User order delivery management methods.
components:
  securitySchemes:
    cookie-auth:
      type: apiKey
      in: cookie
      name: Authorization
      description: User session token.
    admin-role:
      type: apiKey
      in: cookie
      name: Admin
      description: Role for administrator.
    customer-role:
      type: apiKey
      in: cookie
      name: Customer
      description: Role for customer.
  responses:
    "400":
      description: Data validation error.
    "401":
      description: User is not authenticate.
    "403":
      description: User is not administrator.
    "404":
      description: No entities could be found based on the argument or arguments passed.
    "409":
      description: An entity with the same name already exists.
  schemas:
    user-role:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: admin
        createDate: 00.11.2222
        updateDate: 99.88.7777
    user-status:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: online
        createDate: 00.11.2222
        updateDate: 99.88.7777
    user:
      type: object
      properties:
        userRoleId:
          type: integer
          default: 2
          nullable: true
        name:
          type: string
          minLength: 2
        email:
          type: string
          minLength: 6
        phoneNumber:
          type: string
          maxLength: 15
          minLength: 10
        password:
          type: string
      example:
        id: 1
        userRoleId: 1
        userStatusId: 1
        name: Harry Potter
        email: potter@hogwarts.com
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-status:
      type: object
      properties:
        code:
          type: integer
          minLength: 3
          maxLength: 3
        name:
          type: string
      example:
        id: 1
        code: 402
        name: paid
        createDate: 00.11.2222
        updateDate: 99.88.7777
    category:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: concrete
        createDate: 00.11.2222
        updateDate: 99.88.7777
    company:
      type: object
      properties:
        name:
          type: string
        linkToWebSite:
          type: string
        linkToLogoImage:
          type: string
        phoneNumber:
          type: string
          minLength: 10
          maxLength: 15
        email:
          type: string
          minLength: 6
        description:
          type: string
          minLength: 50
      example:
        id: 1
        name: facebook
        linkToWebSite: https://facebook.com
        linkToLogoImage: /user/admin/server/facebook/images/logo.png
        phoneNumber: 89997776655
        email: facebook@meta.com
        description: many text
        createDate: 00.11.2222
        updateDate: 99.88.7777
    product:
      type: object
      properties:
        companyId:
          type: integer
        categoryId:
          type: integer
        quantity:
          type: integer
          default: 0
        price:
          type: integer
        rating:
          type: integer
          default: 5
        linkToImages:
          type: string
        title:
          type: string
        description:
          type: string
          minLength: 50
      example:
        id: 1
        companyId: 1
        categoryId: 1
        quantity: 17
        price: 3500
        rating: 4
        linkToImages: linkToImages
        title: concrete
        description: concrete
        createDate: 00.11.2222
        updateDate: 99.88.7777
    feedback:
      type: object
      properties:
        userId:
          type: integer
        productId:
          type: integer
        companyId:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
          default: 5
        title:
          type: string
          minLength: 15
        message:
          type: string
          minLength: 50
      example:
        id: 1
        userId: 1
        productId: 1
        companyId: 1
        rating: 5
        title: the very very good!
        message: text
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-payment-type:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: Visa
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order:
      type: object
      properties:
        userId:
          type: integer
        orderStatusId:
          type: integer
        orderPaymentTypeId:
          type: integer
      example:
        id: 1
        userId: 1
        orderStatusId: 1
        orderPaymentTypeId: 1
        orderNumber: 9999
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-detail:
      type: object
      properties:
        orderId:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
          default: 1
      example:
        id: 1
        orderId: 1
        productId: 1
        isDeleted: false
        quantity: 1
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-history:
      type: object
      properties:
        orderStatusId:
          type: integer
        orderId:
          type: integer
        totalQuantity:
          type: integer
        totalCost:
          type: number
      example:
        id: 1
        orderStatusId: 1
        orderId: 1
        totalQuantity: 10
        totalCost: 150000
        createDate: 00.11.2222
        updateDate: 99.88.7777
    delivery:
      type: object
      properties:
        orderId:
          type: integer
        amount:
          type: number
        addressFrom:
          type: string
        addressTo:
          type: string
        approximateDate:
          type: string
      example:
        id: 1
        orderId: 1
        amount: 1500
        addressFrom: Almaty
        addressTo: Moscow
        approximateDate: 55.55.4444
        createDate: 00.11.2222
        updateDate: 99.88.7777
    session:
      type: object
      properties:
        userId:
          type: integer
        token:
          type: string
        liveTime:
          type: string
      example:
        id: 1
        userId: 1
        token: token
        liveTime: 66.55.4444-33:33
        createDate: 00.11.2222
        updateDate: 99.88.7777
    auth-audit-event:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: successfully logging
        createDate: 00.11.2222
        updateDate: 99.88.7777
    auth-audit:
      type: object
      properties:
        userId:
          type: integer
        authAuditEventId:
          type: integer
        sessionId:
          type: integer
      example:
        id: 1
        userid: 1
        authAuditEventId: 1
        sessionId: 1
        createDate: 00.11.2222
        updateDate: 99.88.7777
  parameters:
    page-from:
      name: limit
      in: query
      description: Starting from number.
      required: false
      schema:
        type: integer
        default: 1
        nullable: true
    page-to:
      name: offset
      in: query
      description: Ending with number.
      required: false
      schema:
        type: integer
        default: 15
        nullable: true
    userRoleId:
      name: userRoleId
      in: path
      required: true
      description: User role id.
      schema:
        type: integer
    userStatusId:
      name: userStatusId
      in: path
      required: true
      description: User status id.
      schema:
        type: integer
    userId:
      name: userId
      in: path
      required: true
      description: User id.
      schema:
        type: integer
    queryUserId:
      name: userId
      in: query
      required: false
      description: User id.
      schema:
        type: integer
    orderStatusId:
      name: orderStatusId
      in: path
      required: true
      description: Order status id.
      schema:
        type: integer
    queryOrderStatusId:
      name: orderStatusId
      in: query
      required: true
      description: Order status id.
      schema:
        type: integer
    categoryId:
      name: categoryId
      in: path
      required: true
      description: Category id.
      schema:
        type: integer
    queryCategoryId:
      name: categoryId
      in: query
      required: true
      description: Category id.
      schema:
        type: integer
    companyId:
      name: companyId
      in: path
      required: true
      description: Company id.
      schema:
        type: integer
    query-companyId:
      name: companyId
      in: query
      required: true
      description: Company id.
      schema:
        type: integer
    productId:
      name: productId
      in: path
      required: true
      description: Product id.
      schema:
        type: integer
    queryProductId:
      name: productId
      in: query
      required: false
      description: Product id.
      schema:
        type: integer
    feedbackId:
      name: feedbackId
      in: path
      required: true
      description: Feedback id.
      schema:
        type: integer
    orderPaymentTypeId:
      name: orderPaymentTypeId
      in: path
      required: true
      description: Order-payment type id.
      schema:
        type: integer
    queryOrderPaymentTypeId:
      name: orderPaymentTypeId
      in: query
      required: true
      description: Order payment type id.
      schema:
        type: integer
    orderId:
      name: orderId
      in: path
      required: true
      description: Order id.
      schema:
        type: integer
    queryOrderId:
      name: orderId
      in: query
      required: true
      description: Order id.
      schema:
        type: integer
    sessionId:
      name: sessionId
      in: path
      required: true
      description: Session id.
      schema:
        type: integer
    querySessionId:
      name: sessionId
      in: query
      required: true
      description: Session id.
      schema:
        type: integer
    authAuditEventId:
      name: authAuditEventId
      in: path
      required: true
      description: Auth audit event id.
      schema:
        type: integer
    orderDetailId:
      name: orderDetailId
      in: path
      required: true
      description: Order detail id
      schema:
        type: integer
paths:
  /user-roles:
    post:
      summary: Create a new user role.
      tags:
        - user-role
        - admin
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: New user role.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userRoleName:
                  type: string
      responses:
        "201":
          description: Created new user role.
          content:
            application/json:
              example:
                id: 1
                name: admin
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - user-role
        - admin
      summary: Get all user roles.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: All user role received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user-role"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/user-roles/{userRoleId}":
    put:
      tags:
        - user-role
        - admin
      summary: Update user role name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/userRoleId"
      requestBody:
        description: New user role.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userRoleName:
                  type: string
      responses:
        "200":
          description: User role successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-role"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  /user-statuses/:
    post:
      summary: Create a new user status.
      tags:
        - user-status
        - admin
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: New user status.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userStatusName:
                  type: string
      responses:
        "201":
          description: Created new user status.
          content:
            application/json:
              example:
                id: 1
                name: online
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - user-status
        - admin
      summary: Get all user status.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: All user status received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user-status"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/user-statuses/{userStatusId}":
    put:
      tags:
        - user-status
        - admin
      summary: Update user status name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/userStatusId"
      requestBody:
        description: New user status.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userStatusName:
                  type: string
      responses:
        "200":
          description: User status successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-status"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  /order-statuses:
    post:
      summary: Create a new order status.
      tags:
        - order-status
        - admin
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: Name and code for order status.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  minLength: 3
                  maxLength: 3
                name:
                  type: string
      responses:
        "201":
          description: Created new order status.
          content:
            application/json:
              example:
                id: 1
                code: 402
                name: paid
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - order-status
        - admin
      summary: Get all order statuses.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: All order-status received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order-status"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/order-statuses/{orderStatusId}":
    patch:
      tags:
        - order-status
        - admin
      summary: Update order status name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/orderStatusId"
      requestBody:
        description: New code or/and name order status.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  nullable: true
                  minLength: 3
                  maxLength: 3
                name:
                  type: string
                  nullable: true
      responses:
        "200":
          description: Order status successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-status"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  /order-payment-types:
    post:
      summary: Create a new order payment type.
      tags:
        - order-payment-type
        - admin
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: New order payment type.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderPaymentTypeName:
                  type: string
      responses:
        "201":
          description: Created new order payment type.
          content:
            application/json:
              example:
                id: 1
                name: Visa
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - order-payment-type
        - admin
      summary: Get all order payment types.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: All order payments received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order-payment-type"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/order-payment-types/{orderPaymentTypeId}":
    put:
      tags:
        - order-payment-type
        - admin
      summary: Update order payment type name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/orderPaymentTypeId"
      requestBody:
        description: New order payment type.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderPaymentTypeName:
                  type: string
      responses:
        "200":
          description: Order payment type successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-payment-type"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  /auth-audit-events:
    post:
      summary: Create a new authentication event.
      tags:
        - auth-audit-event
        - admin
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: New audit event name.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authEventName:
                  type: string
      responses:
        "201":
          description: Created new auth audit event.
          content:
            application/json:
              example:
                id: 1
                name: successfully logging
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - auth-audit-event
        - admin
      summary: Get all a auth audit events.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: All audit events received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/auth-audit-event"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/auth-audit-events/{authAuditEventId}":
    put:
      tags:
        - auth-audit-event
        - admin
      summary: Update auth audit event name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/authAuditEventId"
      requestBody:
        description: New audit event name.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authEventName:
                  type: string
      responses:
        "200":
          description: Audit event name successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/auth-audit-event"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  /auth/log-in:
    post:
      summary: Sign in.
      tags:
        - auth
        - no-auth
      requestBody:
        description: User data for sign in. You can specify either email or phone.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  minLength: 6
                phoneNumber:
                  type: string
                  maxLength: 15
                  minLength: 10
                password:
                  type: string
                  minLength: 8
      responses:
        "201":
          description: The user is authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /auth/log-out:
    get:
      summary: Sign out.
      tags:
        - auth
        - customer
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - name: userId
          in: cookie
          description: User id in token.
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: The session has ended..
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /categories:
    post:
      summary: Create a new category.
      tags:
        - category
        - admin
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: New category name.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
      responses:
        "201":
          description: The new category has been successfully created.
          content:
            application/json:
              example:
                id: 1
                name: concrete
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - category
        - no-auth
      summary: Get all categories.
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
        - name: categoryName
          in: path
          required: true
          description: Category id.
          schema:
            type: string
      responses:
        "200":
          description: All categories received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/category"
        "404":
          $ref: "#/components/responses/404"
  "/categories/{categoryId}":
    get:
      tags:
        - category
        - no-auth
      summary: Get category by  id.
      parameters:
        - $ref: "#/components/parameters/categoryId"
      responses:
        "200":
          description: Category received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "404":
          $ref: "#/components/responses/404"
    put:
      tags:
        - category
        - admin
      summary: Update category name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/categoryId"
      requestBody:
        description: New category name.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
      responses:
        "200":
          description: Category name successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  /companies:
    post:
      summary: Create new company.
      tags:
        - company
        - admin
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: Company information.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                linkToWebSite:
                  type: string
                linkToLogoImage:
                  type: string
                phoneNumber:
                  type: string
                  minLength: 10
                  maxLength: 15
                email:
                  type: string
                  minLength: 6
                description:
                  type: string
                  minLength: 50
      responses:
        "201":
          description: Created new company.
          content:
            application/json:
              example:
                id: 1
                name: facebook
                linkToWebSite: https://facebook.com
                linkToLogoImage: /user/admin/server/facebook/images/logo.png
                phoneNumber: 89997776655
                email: facebook@meta.com
                description: many text
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - company
        - no-auth
      summary: Get all companies.
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
        - name: company-title
          in: query
          description: Company tile.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: All company received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/company"
        "404":
          $ref: "#/components/responses/404"
  "/companies/{companyId}":
    get:
      tags:
        - company
        - no-auth
      summary: Get company by  id.
      parameters:
        - $ref: "#/components/parameters/companyId"
      responses:
        "200":
          description: Company received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
        "404":
          $ref: "#/components/responses/404"
    patch:
      tags:
        - company
        - admin
      summary: Update company by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/companyId"
      requestBody:
        description: Update company date.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                linkToWebSite:
                  type: string
                linkToLogoImage:
                  type: string
                phoneNumber:
                  type: string
                  minLength: 10
                  maxLength: 15
                email:
                  type: string
                  minLength: 6
                description:
                  type: string
                  minLength: 50
      responses:
        "200":
          description: Company successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  /products:
    post:
      summary: Create a new product.
      tags:
        - product
        - admin
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: Product data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyId:
                  type: integer
                categoryId:
                  type: integer
                quantity:
                  type: integer
                  default: 0
                price:
                  type: integer
                rating:
                  type: integer
                  default: 5
                linkToImages:
                  type: string
                title:
                  type: string
                description:
                  type: string
                  minLength: 50
      responses:
        "201":
          description: Created new product.
          content:
            application/json:
              example:
                id: 1
                companyId: 1
                categoryId: 1
                quantity: 17
                price: 3500
                rating: 4
                linkToImages: linkToImages
                title: concrete
                description: concrete
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - product
        - no-auth
      summary: Get all products.
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
        - name: product-title
          in: query
          description: Product title.
          required: false
          schema:
            type: string
        - name: category-name
          in: query
          description: Category name
          required: false
          schema:
            type: string
        - name: company-name
          in: query
          description: Company name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: All product received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "404":
          $ref: "#/components/responses/404"
  "/products/{productId}":
    get:
      tags:
        - product
        - no-auth
      summary: Get product by id.
      parameters:
        - $ref: "#/components/parameters/productId"
      responses:
        "200":
          description: Product received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "404":
          $ref: "#/components/responses/409"
    patch:
      tags:
        - product
        - admin
      summary: Update product by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/productId"
      requestBody:
        description: Updated product data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyId:
                  type: integer
                categoryId:
                  type: integer
                quantity:
                  type: integer
                  default: 0
                price:
                  type: integer
                rating:
                  type: integer
                  default: 5
                linkToImages:
                  type: string
                title:
                  type: string
                description:
                  type: string
                  minLength: 50
      responses:
        "200":
          description: Product successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  /users/:
    post:
      summary: Register new user.
      tags:
        - user
        - no-auth
      requestBody:
        description: User data for register new user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user-role:
                  type: integer
                  default: 2
                  nullable: true
                name:
                  type: string
                  minLength: 2
                email:
                  type: string
                  minLength: 6
                phoneNumber:
                  type: string
                  maxLength: 15
                  minLength: 10
                password:
                  type: string
                  minLength: 8
      responses:
        "201":
          description: Created new user status.
          content:
            application/json:
              example:
                id: 1
                userRoleId: 1
                userStatusId: 1
                name: Harry Potter
                email: potter@hogwarts.com
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - user
        - customer
      summary: Get all users.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: All user received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/users/{userId}":
    get:
      tags:
        - user
        - customer
      summary: Get user by user id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: User received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    patch:
      tags:
        - user
        - customer
      summary: Update user by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        description: Update user date.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                email:
                  type: string
                  nullable: true
                  minLength: 6
                phoneNumber:
                  type: string
                  nullable: true
                  minLength: 10
                  maxLength: 15
                password:
                  type: string
                  nullable: true
                  minLength: 8
      responses:
        "200":
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - user
        - customer
      summary: Delete user account user by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: User account successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /orders:
    post:
      tags:
        - order
        - customer
      security:
        - cookie-auth: []
        - customer-role: []
      requestBody:
        description: Only accepts a link to the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                orderPaymentTypeId:
                  type: integer
                orderDetails:
                  type: array
                  items:
                    type: object
                    properties:
                      productsId:
                        type: integer
                      quantity:
                        type: integer
      responses:
        "201":
          description: Order created.
          content:
            application/json:
              example:
                id: 1
                userId: 1
                orderStatusId: 1
                orderPaymentTypeId: 1
                isCanceled: false
                orderNumber: 1515
                totalCost: 150000
                totalQuantity: 5
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - order
        - admin
      summary: Get all orders.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/queryUserId"
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
        - name: order-status-id
          in: query
          description: Order status id.
          schema:
            type: string
      responses:
        "200":
          description: All orders received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/orders/{orderId}":
    get:
      tags:
        - order
        - customer
      summary: Get all user orders.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/queryUserId"
      responses:
        "200":
          description: All orders received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    patch:
      tags:
        - order
        - customer
      summary: Set user order status.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/queryUserId"
      requestBody:
        description: New user order status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderStatusId:
                  type: integer
                orderPaymentTypeId:
                  type: integer
                totalCost:
                  type: integer
                totalQuantity:
                  type: integer
      responses:
        "200":
          description: Successfully updated user order status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - order
        - customer
      summary: Delete user order by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/queryUserId"
      responses:
        "200":
          description: User order deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/orders/{orderId}/history":
    get:
      tags:
        - order
        - customer
      summary: Get user order history.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: User order history received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order-history"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /delivery:
    post:
      summary: Create new user order delivery.
      tags:
        - delivery
        - customer
      security:
        - cookie-auth: []
        - customer-role: []
      requestBody:
        description: Delivery details.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                addressFrom:
                  type: string
                approximateDate:
                  type: string
                amount:
                  type: integer
                addressTo:
                  type: string
      responses:
        "200":
          description: Delivery created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delivery"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
    get:
      tags:
        - delivery
        - customer
      summary: Get user order delivery.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/queryOrderId"
      responses:
        "200":
          description: User order delivery received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delivery"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    patch:
      tags:
        - delivery
        - customer
      summary: Set user order delivery.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/queryOrderId"
      requestBody:
        description: New user order status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressFrom:
                  type: string
                addressTo:
                  type: string
                approximateDate:
                  type: string
                amount:
                  type: integer
      responses:
        "200":
          description: User order delivery received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delivery"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - delivery
        - customer
      summary: Cancel user order delivery.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/queryOrderId"
      responses:
        "200":
          description: User order delivery canceled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delivery"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/orders/{orderId}/order-details":
    post:
      tags:
        - order-detail
        - customer
      summary: Add new item to user order.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/orderId"
      requestBody:
        description: New product.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
                  default: 1
      responses:
        "200":
          description: Created new user order product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-detail"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    get:
      tags:
        - order-detail
        - customer
      summary: Get all user order products.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: All products received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order-detail"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/orders/{orderId}/order-details/{orderDetailId}":
    patch:
      tags:
        - order-detail
        - customer
      summary: Reduce quantity of product.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/orderDetailId"
      requestBody:
        description: UUpdated quantity.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        "200":
          description: Product quantity changed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-detail"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - order-detail
        - customer
      summary: Delete product from user order.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/orderDetailId"
      responses:
        "200":
          description: Successfully deleted product.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /feedbacks:
    post:
      tags:
        - feedback
        - customer
      security:
        - cookie-auth: []
        - customer-role: []
      summary: Create new user feedback.
      requestBody:
        description: New feedback data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                productId:
                  type: integer
                companyId:
                  type: integer
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  default: 5
                title:
                  type: string
                  minLength: 15
                message:
                  type: string
                  minLength: 50
      responses:
        "200":
          description: User feedback created.
          content:
            application/json:
              example:
                id: 1
                userId: 1
                productId: 1
                companyId: 1
                rating: 5
                title: the very very good!
                message: text
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - feedback
        - customer
      summary: Get user feedbacks.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/queryUserId"
        - $ref: "#/components/parameters/queryProductId"
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: User feedback received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/feedback"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/feedbacks/{feedbackId}":
    get:
      tags:
        - feedback
        - customer
      summary: Get user feedback by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/queryProductId"
        - $ref: "#/components/parameters/feedbackId"
      responses:
        "200":
          description: User feedback received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/feedback"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    patch:
      tags:
        - feedback
        - customer
      summary: Set user feedback by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/queryUserId"
        - $ref: "#/components/parameters/feedbackId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  default: 5
                title:
                  type: string
                  minLength: 15
                message:
                  type: string
                  minLength: 50
      responses:
        "200":
          description: User feedback chanced.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/feedback"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - feedback
        - customer
      summary: Delete user feedback by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/queryUserId"
        - $ref: "#/components/parameters/feedbackId"
      responses:
        "200":
          description: User feedback successfully deleted
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /sessions:
    get:
      tags:
        - session
        - admin
      summary: Get user sessions.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: User sessions received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/session"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/sessions/{sessionId}":
    get:
      tags:
        - session
        - admin
      summary: Get user session by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          description: User session received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/session"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/users/{userId}/auth-audits":
    get:
      tags:
        - user
        - admin
      summary: Get user session auth audits.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/page-from"
        - $ref: "#/components/parameters/page-to"
      responses:
        "200":
          description: User session auth audits received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/auth-audit"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
