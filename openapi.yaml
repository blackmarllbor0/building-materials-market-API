openapi: 3.0.0
info:
  title: builder-materials-market
  description: Online store for purchasing various building materials from various
    companies.yaml.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1/
    description: Main application server.
tags:
  - name: user-role
    description: Manage user roles for administrator.
  - name: user-status
    description: Manage user status for administrator.
  - name: user
    description: Custom data management and administrative panel.
  - name: order-status
    description: Manage order statues for administrator.
  - name: category
    description: Manage category for administrator and viewing for user.
  - name: company
    description: All information about the company and data management by the administrator.
  - name: product
    description: All information about products of different companies and administration.
components:
  securitySchemes:
    cookie-auth:
      type: apiKey
      in: cookie
      name: Authorization
      description: User session token.
    admin-role:
      type: apiKey
      in: cookie
      name: Admin
      description: Role for administrator.
    customer-role:
      type: apiKey
      in: cookie
      name: Customer
      description: Role for customer.
  responses:
    "400":
      description: Data validation error.
    "401":
      description: User is not authenticate.
    "403":
      description: User is not administrator.
  schemas:
    user-role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createDate:
          type: string
        updateDate:
          type: string
      example:
        id: 1
        name: admin
        createDate: 00.11.2222
        updateDate: 99.88.7777
    user-roles:
      type: array
      items:
        $ref: "#/components/schemas/user-role"
    user-status:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createDate:
          type: string
        updateDate:
          type: string
      example:
        id: 1
        name: online
        createDate: 00.11.2222
        updateDate: 99.88.7777
    user-statuses:
      type: array
      items:
        $ref: "#/components/schemas/user-status"
    user:
      type: object
      properties:
        userRole:
          type: integer
          default: 2
          nullable: true
        name:
          type: string
          minLength: 2
        email:
          type: string
          minLength: 6
        phoneNumber:
          type: string
          maxLength: 15
          minLength: 10
        password:
          type: string
      example:
        id: 1
        name: Harry Potter
        email: potter@hogwarts.com
        createDate: 00.11.2222
        updateDate: 99.88.7777
    users:
      type: array
      items:
        $ref: "#/components/schemas/user"
    order-status:
      type: object
      properties:
        code:
          type: integer
          minLength: 3
          maxLength: 3
        name:
          type: string
      example:
        id: 1
        code: 402
        name: paid
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-statuses:
      type: array
      items:
        $ref: "#/components/schemas/order-status"
    category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createDate:
          type: string
        updateDate:
          type: string
      example:
        id: 1
        name: concrete
        createDate: 00.11.2222
        updateDate: 99.88.7777
    categories:
      type: array
      items:
        $ref: "#/components/schemas/category"
    company:
      type: object
      properties:
        name:
          type: string
        linkToWebSite:
          type: string
        linkToLogoImage:
          type: string
        phoneNumber:
          type: string
          minLength: 10
          maxLength: 15
        email:
          type: string
          minLength: 6
        description:
          type: string
          minLength: 50
      example:
        name: facebook
        linkToWebSite: https://facebook.com
        linkToLogoImage: /user/admin/server/facebook/images/logo.png
        phoneNumber: 89997776655
        email: facebook@meta.com
        description: many text
        createDate: 00.11.2222
        updateDate: 99.88.7777
    companies:
      type: array
      items:
        $ref: "#/components/schemas/company"
    product:
      type: object
      properties:
        companyId:
          type: integer
        categoryId:
          type: integer
        quantity:
          type: integer
          default: 0
        price:
          type: integer
        rating:
          type: integer
          default: 5
        linkToImages:
          type: array
          items:
            type: string
        title:
          type: string
        description:
          type: string
          minLength: 50
      example:
        companyId: 1
        categoryId: 1
        quantity: 17
        price: 3500
        rating: 4
        linkToImages:
          - link
          - link
        title: concrete
        description: concrete
    products:
      type: array
      items:
        $ref: "#/components/schemas/product"
  parameters:
    user-role-id:
      name: user-role-id
      in: path
      required: true
      description: User role id.
      schema:
        type: integer
    user-status-id:
      name: user-status-id
      in: path
      required: true
      description: User status id.
      schema:
        type: integer
    user-id:
      name: user-id
      in: path
      required: true
      description: User id.
      schema:
        type: integer
    order-status-id:
      name: order-status-id
      in: path
      required: true
      description: Order status id.
      schema:
        type: integer
    category-id:
      name: category-id
      in: path
      required: true
      description: Category id.
      schema:
        type: integer
    company-id:
      name: company-id
      in: path
      required: true
      description: Company id.
      schema:
        type: integer
    company-name:
      name: company-name
      in: path
      required: true
      description: Company id.
      schema:
        type: integer
    product-id:
      name: product-id
      in: path
      required: true
      description: Product id.
      schema:
        type: integer
    product-name:
      name: product-name
      in: path
      required: true
      description: Product name.
      schema:
        type: string
paths:
  /user-role:
    post:
      summary: Create a new user role.
      tags:
        - user-role
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - name: user-role-name
          in: query
          description: New user role name.
          schema:
            type: string
      responses:
        "201":
          description: Created new user role.
          content:
            application/json:
              example:
                id: 1
                name: admin
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          description: User role with this name already exists.
    get:
      tags:
        - user-role
      summary: Get all user roles.
      security:
        - cookie-auth: []
        - admin-role: []
      responses:
        "200":
          description: All user role received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-roles"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No user role found.
  "/user-role/{user-role-id}":
    get:
      tags:
        - user-role
      summary: Get user role by user role id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-role-id"
      responses:
        "200":
          description: User role received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-role"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: Not found user role with this id.
    put:
      tags:
        - user-role
      summary: Update user role name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-role-id"
        - name: user-role-name
          in: query
          description: Updated user role name.
          schema:
            type: string
      responses:
        "200":
          description: User role successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-role"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1user-role~1%7Buser-role-id%7D/get/responses/404"
        "409":
          $ref: "#/paths/~1user-role/post/responses/409"
    delete:
      tags:
        - user-role
      summary: Delete user role name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-role-id"
      responses:
        "200":
          description: User role successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1user-role~1%7Buser-role-id%7D/get/responses/404"
  /user-status:
    post:
      summary: Create a new user status.
      tags:
        - user-status
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - name: user-status-name
          in: query
          description: New user status name.
          schema:
            type: string
      responses:
        "201":
          description: Created new user status.
          content:
            application/json:
              example:
                id: 1
                name: online
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          description: User status with this name already exists.
    get:
      tags:
        - user-status
      summary: Get all user status.
      security:
        - cookie-auth: []
        - admin-role: []
      responses:
        "200":
          description: All user status received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-statuses"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No user status found.
  "/user-status/{user-status-id}":
    get:
      tags:
        - user-status
      summary: Get user statues by user status id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-status-id"
      responses:
        "200":
          description: User status received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-status"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: Not found user status with this id.
    put:
      tags:
        - user-status
      summary: Update user status name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-status-id"
        - name: user-status-name
          in: query
          description: Updated user status name.
          schema:
            type: string
      responses:
        "200":
          description: User status successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-status"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1user-status~1%7Buser-status-id%7D/get/responses/404"
        "409":
          $ref: "#/paths/~1user-status/post/responses/409"
    delete:
      tags:
        - user-status
      summary: Delete user status by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-status-id"
      responses:
        "200":
          description: User status successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1user-status~1%7Buser-status-id%7D/get/responses/404"
  /user:
    post:
      summary: Create new user.
      tags:
        - user
      requestBody:
        description: User data for creating new user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user-role:
                  type: integer
                  default: 2
                  nullable: true
                name:
                  type: string
                  minLength: 2
                email:
                  type: string
                  minLength: 6
                phoneNumber:
                  type: string
                  maxLength: 15
                  minLength: 10
                password:
                  type: string
                  minLength: 8
      responses:
        "201":
          description: Created new user status.
          content:
            application/json:
              example:
                id: 1
                name: Harry Potter
                email: potter@hogwarts.com
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          description: User with this email already exists.
    get:
      tags:
        - user
      summary: Get all users.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - name: limit
          in: query
          description: Number of users received (not required).
          required: false
          schema:
            type: integer
            default: 15
            nullable: true
      responses:
        "200":
          description: All user received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No users found.
  "/user/{user-id}":
    get:
      tags:
        - user
      summary: Get user by user id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not found user with this id.
    put:
      tags:
        - user
      summary: Update user by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      requestBody:
        description: Update user date.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                email:
                  type: string
                  nullable: true
                  minLength: 6
                phoneNumber:
                  type: string
                  nullable: true
                  minLength: 10
                  maxLength: 15
                password:
                  type: string
                  nullable: true
                  minLength: 8
      responses:
        "200":
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/paths/~1user~1%7Buser-id%7D/get/responses/404"
        "409":
          $ref: "#/paths/~1user/post/responses/409"
    delete:
      tags:
        - user
      summary: Delete user by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/paths/~1user~1%7Buser-id%7D/get/responses/404"
  "/user/blocked/{user-id}":
    put:
      tags:
        - user
      summary: Block user by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User successfully blocked.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1user~1%7Buser-id%7D/get/responses/404"
  "/user/unblocked/{user-id}":
    put:
      tags:
        - user
      summary: Unblock user by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User successfully unblocked.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1user~1%7Buser-id%7D/get/responses/404"
  "/user/deleted/{user-id}":
    put:
      tags:
        - user
      summary: Delete user account user by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User account successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/paths/~1user~1%7Buser-id%7D/get/responses/404"
  "/user/undeleted/{user-id}":
    put:
      tags:
        - user
      summary: Undelete user account user by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User account successfully undeleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/paths/~1user~1%7Buser-id%7D/get/responses/404"
  /order-status:
    post:
      summary: Create a new order status.
      tags:
        - order-status
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: Name and code for order status.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  minLength: 3
                  maxLength: 3
                name:
                  type: string
      responses:
        "201":
          description: Created new order status.
          content:
            application/json:
              example:
                id: 1
                code: 402
                name: paid
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          description: Order status with this name already exists.
    get:
      tags:
        - order-status
      summary: Get all order-statuses.
      security:
        - cookie-auth: []
        - admin-role: []
      responses:
        "200":
          description: All order-status received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-statuses"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No order-status found.
  "/order-status/{order-status-id}":
    get:
      tags:
        - order-status
      summary: Get order status by order status id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-status-id"
      responses:
        "200":
          description: Order status received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-status"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: Order status with this id not found.
    put:
      tags:
        - order-status
      summary: Update order status name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-status-id"
      requestBody:
        description: Code or name order status.
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  nullable: true
                  minLength: 3
                  maxLength: 3
                name:
                  type: string
                  nullable: true
      responses:
        "200":
          description: Order status successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-status"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1order-status~1%7Border-status-id%7D/get/responses/404"
    delete:
      tags:
        - order-status
      summary: Delete order status by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-status-id"
      responses:
        "200":
          description: Order status successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1order-status~1%7Border-status-id%7D/get/responses/404"
  /category:
    post:
      summary: Create a new category.
      tags:
        - category
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - name: category-name
          in: query
          description: Category name.
          schema:
            type: string
      responses:
        "201":
          description: Created new category.
          content:
            application/json:
              example:
                id: 1
                name: concrete
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          description: Category with this name already exists.
    get:
      tags:
        - category
      summary: Get all categories.
      security:
        - cookie-auth: []
        - customer-role: []
      responses:
        "200":
          description: All categories received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categories"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No categories found.
  "/category/{category-id}":
    put:
      tags:
        - category
      summary: Update category name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/category-id"
        - name: category-name
          in: query
          description: Updated category name.
          schema:
            type: string
      responses:
        "200":
          description: Category successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: Category not found by this id.
        "409":
          $ref: "#/paths/~1category/post/responses/409"
    delete:
      tags:
        - category
      summary: Delete category by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/category-id"
      responses:
        "200":
          description: Category successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/paths/~1category~1%7Bcategory-id%7D/put/responses/404"
  /company:
    post:
      summary: Create new company.
      tags:
        - company
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: Company data for added new company.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                linkToWebSite:
                  type: string
                linkToLogoImage:
                  type: string
                phoneNumber:
                  type: string
                  minLength: 10
                  maxLength: 15
                email:
                  type: string
                  minLength: 6
                description:
                  type: string
                  minLength: 50
      responses:
        "201":
          description: Created new company.
          content:
            application/json:
              example:
                name: facebook
                linkToWebSite: https://facebook.com
                linkToLogoImage: /user/admin/server/facebook/images/logo.png
                phoneNumber: 89997776655
                email: facebook@meta.com
                description: many text
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          description: Category with this name already exists.
    get:
      tags:
        - company
      summary: Get all company.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - name: limit
          in: query
          description: Number of companies received (not required).
          required: false
          schema:
            type: integer
            default: 15
            nullable: true
      responses:
        "200":
          description: All company received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/companies"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No companies found.
  "/company/{company-id}":
    get:
      tags:
        - company
      summary: Get company by company id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/company-id"
      responses:
        "200":
          description: Company received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Company not found by this id.
    put:
      tags:
        - company
      summary: Update company by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/company-id"
      requestBody:
        description: Update company date.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/company"
      responses:
        "200":
          description: Company successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/paths/~1company~1%7Bcompany-id%7D/get/responses/404"
        "409":
          $ref: "#/paths/~1company/post/responses/409"
    delete:
      tags:
        - company
      summary: Delete company by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/company-id"
      responses:
        "200":
          description: Company successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/paths/~1company~1%7Bcompany-id%7D/get/responses/404"
  "/company/{company-name}":
    get:
      tags:
        - company
      summary: Get company by company name.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/company-name"
      responses:
        "200":
          description: Company received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Company not found by this name.
