openapi: 3.0.0
info:
  title: builder-materials-market
  description: Online store for purchasing various building materials from various
    companies.yaml.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1/
    description: Main application server.
tags:
  - name: user-role
    description: Manage user roles for administrator.
  - name: user-status
    description: Manage user status for administrator.
  - name: user
    description: Custom data management and administrative panel.
  - name: order-status
    description: Manage order statues for administrator.
  - name: category
    description: Manage category for administrator and viewing for user.
  - name: company
    description: All information about the company and data management by the administrator.
  - name: product
    description: All information about products of different companies and administration.
  - name: feedback
    description: Product reviews.
  - name: order-payment-type
    description: Manage order payment type for administrator.
  - name: order
    description: Order management
  - name: order-detail
    description: Management of each item of a specific order.
  - name: order-history
    description: View and manage your order history.
  - name: delivery
    description: Custom Delivery Management.
  - name: auth-audit-event
    description: Manage audit event for administrator.
  - name: auth
    description: Login management methods.
components:
  securitySchemes:
    cookie-auth:
      type: apiKey
      in: cookie
      name: Authorization
      description: User session token.
    admin-role:
      type: apiKey
      in: cookie
      name: Admin
      description: Role for administrator.
    customer-role:
      type: apiKey
      in: cookie
      name: Customer
      description: Role for customer.
  responses:
    "400":
      description: Data validation error.
    "401":
      description: User is not authenticate.
    "403":
      description: User is not administrator.
    "404":
      description: No entities could be found based on the argument or arguments passed.
    "409":
      description: An entity with the same name already exists.
  schemas:
    user-role:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: admin
        createDate: 00.11.2222
        updateDate: 99.88.7777
    user-status:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: online
        createDate: 00.11.2222
        updateDate: 99.88.7777
    user:
      type: object
      properties:
        userRoleId:
          type: integer
          default: 2
          nullable: true
        name:
          type: string
          minLength: 2
        email:
          type: string
          minLength: 6
        phoneNumber:
          type: string
          maxLength: 15
          minLength: 10
        password:
          type: string
      example:
        id: 1
        userRoleId: 1
        userStatusId: 1
        name: Harry Potter
        email: potter@hogwarts.com
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-status:
      type: object
      properties:
        code:
          type: integer
          minLength: 3
          maxLength: 3
        name:
          type: string
      example:
        id: 1
        code: 402
        name: paid
        createDate: 00.11.2222
        updateDate: 99.88.7777
    category:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: concrete
        createDate: 00.11.2222
        updateDate: 99.88.7777
    company:
      type: object
      properties:
        name:
          type: string
        linkToWebSite:
          type: string
        linkToLogoImage:
          type: string
        phoneNumber:
          type: string
          minLength: 10
          maxLength: 15
        email:
          type: string
          minLength: 6
        description:
          type: string
          minLength: 50
      example:
        id: 1
        name: facebook
        linkToWebSite: https://facebook.com
        linkToLogoImage: /user/admin/server/facebook/images/logo.png
        phoneNumber: 89997776655
        email: facebook@meta.com
        description: many text
        createDate: 00.11.2222
        updateDate: 99.88.7777
    product:
      type: object
      properties:
        companyId:
          type: integer
        categoryId:
          type: integer
        quantity:
          type: integer
          default: 0
        price:
          type: integer
        rating:
          type: integer
          default: 5
        linkToImages:
          type: array
          items:
            type: string
        title:
          type: string
        description:
          type: string
          minLength: 50
      example:
        id: 1
        companyId: 1
        categoryId: 1
        quantity: 17
        price: 3500
        rating: 4
        linkToImages:
          - link
          - link
        title: concrete
        description: concrete
        createDate: 00.11.2222
        updateDate: 99.88.7777
    feedback:
      type: object
      properties:
        userId:
          type: integer
        productId:
          type: integer
        companyId:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
          default: 5
        title:
          type: string
          minLength: 15
        message:
          type: string
          minLength: 50
      example:
        id: 1
        userId: 1
        productId: 1
        companyId: 1
        rating: 5
        title: the very very good!
        message: text
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-payment-type:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: Visa
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order:
      type: object
      properties:
        userId:
          type: integer
        orderStatusId:
          type: integer
        orderPaymentTypeId:
          type: integer
      example:
        id: 1
        userId: 1
        orderStatusId: 1
        orderPaymentTypeId: 1
        orderNumber: 9999
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-detail:
      type: object
      properties:
        orderId:
          type: integer
        productId:
          type: integer
      example:
        id: 1
        orderId: 1
        productId: 1
        isDeleted: false
        createDate: 00.11.2222
        updateDate: 99.88.7777
    order-history:
      type: object
      properties:
        orderStatusId:
          type: integer
        orderId:
          type: integer
        totalQuantity:
          type: integer
        totalCost:
          type: number
      example:
        id: 1
        orderStatusId: 1
        orderId: 1
        totalQuantity: 10
        totalCost: 150000
        createDate: 00.11.2222
        updateDate: 99.88.7777
    delivery:
      type: object
      properties:
        orderId:
          type: integer
        amount:
          type: number
        addressFrom:
          type: string
        addressTo:
          type: string
        approximateDate:
          type: string
      example:
        id: 1
        orderId: 1
        amount: 1500
        addressFrom: Almaty
        addressTo: Moscow
        approximateDate: 55.55.4444
        createDate: 00.11.2222
        updateDate: 99.88.7777
    session:
      type: object
      properties:
        userId:
          type: integer
        token:
          type: string
        liveTime:
          type: string
      example:
        id: 1
        userId: 1
        token: token
        liveTime: 66.55.4444-33:33
        createDate: 00.11.2222
        updateDate: 99.88.7777
    auth-audit-event:
      type: object
      properties:
        name:
          type: string
      example:
        id: 1
        name: successfully logging
        createDate: 00.11.2222
        updateDate: 99.88.7777
    auth-audit:
      type: object
      properties:
        userId:
          type: integer
        authAuditEventId:
          type: integer
        sessionId:
          type: integer
      example:
        id: 1
        userid: 1
        authAuditEventId: 1
        sessionId: 1
        createDate: 00.11.2222
        updateDate: 99.88.7777
  parameters:
    user-role-id:
      name: user-role-id
      in: path
      required: true
      description: User role id.
      schema:
        type: integer
    user-status-id:
      name: user-status-id
      in: path
      required: true
      description: User status id.
      schema:
        type: integer
    user-id:
      name: user-id
      in: path
      required: true
      description: User id.
      schema:
        type: integer
    query-user-id:
      name: user-id
      in: query
      required: true
      description: User id.
      schema:
        type: integer
    order-status-id:
      name: order-status-id
      in: path
      required: true
      description: Order status id.
      schema:
        type: integer
    query-order-status-id:
      name: order-status-id
      in: query
      required: true
      description: Order status id.
      schema:
        type: integer
    category-id:
      name: category-id
      in: path
      required: true
      description: Category id.
      schema:
        type: integer
    query-category-id:
      name: category-id
      in: query
      required: true
      description: Category id.
      schema:
        type: integer
    company-id:
      name: company-id
      in: path
      required: true
      description: Company id.
      schema:
        type: integer
    company-name:
      name: company-name
      in: path
      required: true
      description: Company id.
      schema:
        type: integer
    query-company-id:
      name: company-id
      in: query
      required: true
      description: Company id.
      schema:
        type: integer
    product-id:
      name: product-id
      in: path
      required: true
      description: Product id.
      schema:
        type: integer
    product-name:
      name: product-title
      in: path
      required: true
      description: Product name.
      schema:
        type: string
    query-product-id:
      name: product-id
      in: query
      required: true
      description: Product id.
      schema:
        type: integer
    feedback-id:
      name: feedback-id
      in: path
      required: true
      description: Feedback id.
      schema:
        type: integer
    order-payment-type-id:
      name: order-payment-type-id
      in: path
      required: true
      description: Order-payment type id.
      schema:
        type: integer
    query-order-payment-type-id:
      name: order-payment-type-id
      in: query
      required: true
      description: Order payment type id.
      schema:
        type: integer
    order-id:
      name: order-id
      in: path
      required: true
      description: Order id.
      schema:
        type: integer
    query-order-id:
      name: order-id
      in: query
      required: true
      description: Order id.
      schema:
        type: integer
    delivery-id:
      name: delivery-id
      in: path
      required: true
      description: Delivery id.
      schema:
        type: integer
    session-id:
      name: session-id
      in: path
      required: true
      description: Session id.
      schema:
        type: integer
    query-session-id:
      name: session-id
      in: query
      required: true
      description: Session id.
      schema:
        type: integer
    auth-audit-event-id:
      name: auth-audit-event-id
      in: path
      required: true
      description: Auth audit event id.
      schema:
        type: integer
    auth-audit-event:
      name: auth-audit-id
      in: path
      required: true
      description: Auth audit id.
      schema:
        type: integer
paths:
  /auth/register:
    post:
      summary: Register new user.
      tags:
        - auth
      requestBody:
        description: User data for register new user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user-role:
                  type: integer
                  default: 2
                  nullable: true
                name:
                  type: string
                  minLength: 2
                email:
                  type: string
                  minLength: 6
                phoneNumber:
                  type: string
                  maxLength: 15
                  minLength: 10
                password:
                  type: string
                  minLength: 8
      responses:
        "201":
          description: Created new user status.
          content:
            application/json:
              example:
                id: 1
                userRoleId: 1
                userStatusId: 1
                name: Harry Potter
                email: potter@hogwarts.com
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
  /auth/log-in:
    post:
      summary: Sign in.
      tags:
        - auth
      requestBody:
        description: User data for sign in. You can specify either email or phone.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  minLength: 6
                phoneNumber:
                  type: string
                  maxLength: 15
                  minLength: 10
                password:
                  type: string
                  minLength: 8
      responses:
        "201":
          description: The user is authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /auth/log-out/:
    get:
      summary: Sign out.
      tags:
        - auth
      parameters:
        - name: user-id
          in: cookie
          description: User id in token.
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: The session has ended..
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /user-role:
    post:
      summary: Create a new user role.
      tags:
        - user-role
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - name: user-role-name
          in: query
          description: New user role name.
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created new user role.
          content:
            application/json:
              example:
                id: 1
                name: admin
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - user-role
      summary: Get all user roles.
      security:
        - cookie-auth: []
        - admin-role: []
      responses:
        "200":
          description: All user role received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user-role"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/user-role/{user-role-id}":
    put:
      tags:
        - user-role
      summary: Update user role name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-role-id"
        - name: user-role-name
          in: query
          description: Updated user role name.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User role successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-role"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - user-role
      summary: Delete user role name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-role-id"
      responses:
        "200":
          description: User role successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /user-status:
    post:
      summary: Create a new user status.
      tags:
        - user-status
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - name: user-status-name
          in: query
          description: New user status name.
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created new user status.
          content:
            application/json:
              example:
                id: 1
                name: online
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - user-status
      summary: Get all user status.
      security:
        - cookie-auth: []
        - admin-role: []
      responses:
        "200":
          description: All user status received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user-status"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/user-status/{user-status-id}":
    put:
      tags:
        - user-status
      summary: Update user status name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-status-id"
        - name: user-status-name
          in: query
          required: true
          description: Updated user status name.
          schema:
            type: string
      responses:
        "200":
          description: User status successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user-status"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - user-status
      summary: Delete user status by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-status-id"
      responses:
        "200":
          description: User status successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /user:
    get:
      tags:
        - user
      summary: Get all users.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - name: limit
          in: query
          description: Number of users received (not required).
          required: false
          schema:
            type: integer
            default: 15
            nullable: true
      responses:
        "200":
          description: All user received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "404":
          $ref: "#/components/responses/404"
  "/user/{user-id}":
    get:
      tags:
        - user
      summary: Get user by user id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    put:
      tags:
        - user
      summary: Update user by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      requestBody:
        description: Update user date.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                email:
                  type: string
                  nullable: true
                  minLength: 6
                phoneNumber:
                  type: string
                  nullable: true
                  minLength: 10
                  maxLength: 15
                password:
                  type: string
                  nullable: true
                  minLength: 8
      responses:
        "200":
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - user
      summary: Delete user by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/user/{user-id}/blocked":
    put:
      tags:
        - user
      summary: Block user by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User successfully blocked.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/user/{user-id}/unblocked":
    put:
      tags:
        - user
      summary: Unblock user by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User successfully unblocked.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/user/{user-id}/deleted":
    put:
      tags:
        - user
      summary: Delete user account user by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User account successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/user/{user-id}/undeleted":
    put:
      tags:
        - user
      summary: Undelete user account user by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: User account successfully undeleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /order-status:
    post:
      summary: Create a new order status.
      tags:
        - order-status
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: Name and code for order status.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  minLength: 3
                  maxLength: 3
                name:
                  type: string
      responses:
        "201":
          description: Created new order status.
          content:
            application/json:
              example:
                id: 1
                code: 402
                name: paid
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/409"
    get:
      tags:
        - order-status
      summary: Get all order statuses.
      security:
        - cookie-auth: []
        - admin-role: []
      responses:
        "200":
          description: All order-status received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order-status"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/order-status/{order-status-id}":
    put:
      tags:
        - order-status
      summary: Update order status name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-status-id"
      requestBody:
        description: Code or name order status.
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  nullable: true
                  minLength: 3
                  maxLength: 3
                name:
                  type: string
                  nullable: true
      responses:
        "200":
          description: Order status successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-status"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - order-status
      summary: Delete order status by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-status-id"
      responses:
        "200":
          description: Order status successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /category:
    post:
      summary: Create a new category.
      tags:
        - category
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - name: category-name
          in: query
          description: Category name.
          required: true
          schema:
            type: string
      responses:
        "201":
          description: The new category has been successfully created.
          content:
            application/json:
              example:
                id: 1
                name: concrete
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - category
      summary: Get all categories.
      security:
        - cookie-auth: []
        - customer-role: []
      responses:
        "200":
          description: All categories received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/category"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/category/{category-id}":
    put:
      tags:
        - category
      summary: Update category name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/category-id"
        - name: category-name
          in: query
          description: Updated category name.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Category name successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - category
      summary: Delete category by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/category-id"
      responses:
        "200":
          description: Category successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /company:
    post:
      summary: Create new company.
      tags:
        - company
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: Company information.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                linkToWebSite:
                  type: string
                linkToLogoImage:
                  type: string
                phoneNumber:
                  type: string
                  minLength: 10
                  maxLength: 15
                email:
                  type: string
                  minLength: 6
                description:
                  type: string
                  minLength: 50
      responses:
        "201":
          description: Created new company.
          content:
            application/json:
              example:
                name: facebook
                linkToWebSite: https://facebook.com
                linkToLogoImage: /user/admin/server/facebook/images/logo.png
                phoneNumber: 89997776655
                email: facebook@meta.com
                description: many text
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - company
      summary: Get all companies.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - name: limit
          in: query
          description: Number of companies received (not required).
          required: false
          schema:
            type: integer
            default: 15
      responses:
        "200":
          description: All company received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/company"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/company/{company-id}":
    get:
      tags:
        - company
      summary: Get company by  id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/company-id"
      responses:
        "200":
          description: Company received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    put:
      tags:
        - company
      summary: Update company by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/company-id"
      requestBody:
        description: Update company date.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                linkToWebSite:
                  type: string
                linkToLogoImage:
                  type: string
                phoneNumber:
                  type: string
                  minLength: 10
                  maxLength: 15
                email:
                  type: string
                  minLength: 6
                description:
                  type: string
                  minLength: 50
      responses:
        "200":
          description: Company successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - company
      summary: Delete company by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/company-id"
      responses:
        "200":
          description: Company successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/company/{company-name}":
    get:
      tags:
        - company
      summary: Get company by company name.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/company-name"
      responses:
        "200":
          description: Company received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /product:
    post:
      summary: Create a new product.
      tags:
        - product
      security:
        - cookie-auth: []
        - admin-role: []
      requestBody:
        description: Product data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyId:
                  type: integer
                categoryId:
                  type: integer
                quantity:
                  type: integer
                  default: 0
                price:
                  type: integer
                rating:
                  type: integer
                  default: 5
                linkToImages:
                  type: array
                  items:
                    type: string
                title:
                  type: string
                description:
                  type: string
                  minLength: 50
      responses:
        "201":
          description: Created new product.
          content:
            application/json:
              example:
                companyId: 1
                categoryId: 1
                quantity: 17
                price: 3500
                rating: 4
                linkToImages:
                  - link
                  - link
                title: concrete
                description: concrete
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    get:
      tags:
        - product
      summary: Get all products.
      responses:
        "200":
          description: All product received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "404":
          $ref: "#/components/responses/404"
  "/product/{product-id}":
    get:
      tags:
        - product
      summary: Get product by id.
      parameters:
        - $ref: "#/components/parameters/product-id"
      responses:
        "200":
          description: Product received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "404":
          $ref: "#/components/responses/409"
    put:
      tags:
        - product
      summary: Update product by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-role-id"
      requestBody:
        description: Updated product data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyId:
                  type: integer
                categoryId:
                  type: integer
                quantity:
                  type: integer
                  default: 0
                price:
                  type: integer
                rating:
                  type: integer
                  default: 5
                linkToImages:
                  type: array
                  items:
                    type: string
                title:
                  type: string
                description:
                  type: string
                  minLength: 50
      responses:
        "200":
          description: Product successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - product
      summary: Delete product by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/product-id"
      responses:
        "200":
          description: Product successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/product/{product-title}":
    get:
      tags:
        - product
      summary: Get product by title.
      parameters:
        - $ref: "#/components/parameters/product-name"
      responses:
        "200":
          description: Product received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        "404":
          $ref: "#/components/responses/404"
  "/product/category/{category-id}":
    get:
      tags:
        - product
      summary: Get products by category.
      security: null
      parameters:
        - $ref: "#/components/parameters/category-id"
      responses:
        "200":
          description: Product sorted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/product/company/{company-id}":
    get:
      tags:
        - product
      summary: Get all the company's products.
      security: null
      parameters:
        - $ref: "#/components/parameters/company-id"
      responses:
        "200":
          description: Product sorted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/product/company/{company-id}/category/{category-id}":
    get:
      tags:
        - product
      summary: Get company products by category.
      security: null
      parameters:
        - $ref: "#/components/parameters/company-id"
        - $ref: "#/components/parameters/category-id"
      responses:
        "200":
          description: Product sorted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /product/price:
    get:
      tags:
        - product
      summary: Sort products by price.
      security: null
      parameters:
        - name: min
          in: query
          description: Min price.
          required: true
          schema:
            type: integer
        - name: max
          in: query
          description: Max price.
          required: true
          schema:
            type: integer
        - name: category-id
          in: query
          required: false
          description: Category id.
          schema:
            type: integer
        - name: company-id
          in: query
          required: false
          description: Company id.
          schema:
            type: integer
      responses:
        "200":
          description: Product sorted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /feedback:
    post:
      summary: Create new feedback.
      tags:
        - feedback
      security:
        - cookie-auth: []
        - customer-role: []
      requestBody:
        description: Feedback data for creating new feedback.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                productId:
                  type: integer
                companyId:
                  type: integer
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  default: 5
                title:
                  type: string
                  minLength: 15
                message:
                  type: string
                  minLength: 50
      responses:
        "201":
          description: Created new user feedback.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/feedback"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
  "/feedback/{feedback-id}":
    get:
      tags:
        - feedback
      summary: Get feedback by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/feedback-id"
      responses:
        "200":
          description: Feedback received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/feedback"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    put:
      tags:
        - feedback
      summary: Update feedback by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/feedback-id"
      requestBody:
        description: Updated feedback data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  default: 5
                title:
                  type: string
                  minLength: 15
                message:
                  type: string
                  minLength: 50
      responses:
        "200":
          description: Product successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/feedback"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - feedback
      summary: Delete feedback by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/feedback-id"
      responses:
        "200":
          description: Feedback successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/feedback/user/{user-id}":
    get:
      tags:
        - feedback
      summary: Get all user reviews by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: Feedback sorted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/feedback"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/feedback/product/{product-id}":
    get:
      tags:
        - feedback
      summary: Get reviews for the product.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/product-id"
      responses:
        "200":
          description: All product feedbacks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/feedback"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /feedback/rating/:
    get:
      tags:
        - feedback
      summary: Sort reviews by rating.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - name: to
          in: query
          description: From maximum to minimum and vice versa (max/min).
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Reviews by ascending/descending rating.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/feedback"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /order-payment-type:
    post:
      summary: Create a new order payment type.
      tags:
        - order-payment-type
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - name: order-payment-type-name
          in: query
          description: Order payment type name.
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created new order payment type.
          content:
            application/json:
              example:
                id: 1
                name: Visa
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    get:
      tags:
        - order-payment-type
      summary: Get all order payment types.
      security:
        - cookie-auth: []
        - admin-role: []
      responses:
        "200":
          description: All order payments received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order-payment-type"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/order-payment-type/{order-payment-type-id}":
    put:
      tags:
        - order-payment-type
      summary: Update order payment type name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-payment-type-id"
        - name: payment-type
          in: query
          description: New order payment type name.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order payment type successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-payment-type"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - order-payment-type
      summary: Delete order payment type by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-payment-type-id"
      responses:
        "200":
          description: Order payment type successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /order:
    post:
      summary: Create a new user order.
      tags:
        - order
      security:
        - cookie-auth: []
        - customer-role: []
      requestBody:
        description: Feedback data for creating new feedback.
        required: true
        content:
          application/json:
            schema:
              userId:
                type: integer
              orderStatusId:
                type: integer
              orderPaymentTypeId:
                type: integer
      responses:
        "201":
          description: Created new order.
          content:
            application/json:
              example:
                id: 1
                userId: 1
                orderStatusId: 1
                orderPaymentTypeId: 1
                orderNumber: 9999
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
  "/order/{order-id}":
    get:
      tags:
        - order
      summary: Get order by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
      responses:
        "200":
          description: Order received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - order
      summary: Delete order by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
      responses:
        "200":
          description: Feedback successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/order/{order-id}/cancel":
    put:
      tags:
        - order
      summary: Cancel the order by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
      responses:
        "200":
          description: Order successfully canceled.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/order/{order-id}/set-payment-type":
    put:
      tags:
        - order
      summary: Set payment type by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
        - $ref: "#/components/parameters/query-order-payment-type-id"
      responses:
        "200":
          description: Payment method successfully changed.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/order/{order-id}/payment":
    put:
      tags:
        - order
      summary: Pay the order by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
      responses:
        "200":
          description: Order has been paid.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/order/user/{user-id}":
    get:
      tags:
        - order
      summary: Get all user orders.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: Order sorted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/order/user/{user-id  }/status/{status-id}":
    get:
      tags:
        - order
      summary: All user orders by status.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
        - $ref: "#/components/parameters/query-order-status-id"
      responses:
        "200":
          description: Orders sorted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /order-detail:
    post:
      tags:
        - order-detail
      summary: Add new item to order.
      security:
        - cookie-auth: []
        - customer-role: []
      requestBody:
        description: Feedback data for creating new feedback.
        required: true
        content:
          application/json:
            schema:
              orderId:
                type: integer
              productId:
                type: integer
      responses:
        "200":
          description: Created new order detail.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-detail"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
  "/order-detail/order/{order-id}":
    get:
      tags:
        - order-detail
      summary: Receive all products of the order.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
      responses:
        "200":
          description: All order items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order-detail"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - order-detail
      summary: Deletes all details associated with the order by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
      responses:
        "200":
          description: Order details successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/order-detail/order/{order-id}/product/{prodct-id}/":
    put:
      tags:
        - order-detail
      summary: Delete product from order by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
        - $ref: "#/components/parameters/product-id"
      responses:
        "200":
          description: Product successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /order-history:
    post:
      tags:
        - order-history
      summary: Create a new order screenshot.
      security:
        - cookie-auth: []
        - customer-role: []
      requestBody:
        description: Feedback data for creating new feedback.
        required: true
        content:
          application/json:
            schema:
              orderId:
                type: integer
              orderStatusId:
                type: integer
      responses:
        "200":
          description: Created new order history screenshot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-history"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
  "/order-history/order/{order-id}":
    get:
      tags:
        - order-history
      summary: Get all order history by id.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
      responses:
        "200":
          description: Full order history.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order-history"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - order-history
      summary: Delete all order history by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/order-id"
      responses:
        "200":
          description: Order history deleted.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /delivery:
    post:
      summary: Create new user delivery.
      tags:
        - delivery
      security:
        - cookie-auth: []
        - customer-role: []
      requestBody:
        description: Delivery details.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                amount:
                  type: number
                addressFrom:
                  type: string
                addressTo:
                  type: string
                approximateDate:
                  type: string
                createDate:
                  type: string
      responses:
        "200":
          description: Delivery created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delivery"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
  "/delivery/{delivery-id}":
    get:
      tags:
        - delivery
      summary: View delivery information.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/delivery-id"
      responses:
        "200":
          description: Delivery information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delivery"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Delivery not found.
    put:
      tags:
        - delivery
      summary: Set delivery information.
      security:
        - cookie-auth: []
        - customer-role: []
      parameters:
        - $ref: "#/components/parameters/delivery-id"
      requestBody:
        description: Order history.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressFrom:
                  type: string
                addressTo:
                  type: string
      responses:
        "200":
          description: Delivery information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delivery"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Delivery not found.
    delete:
      tags:
        - delivery
      summary: Delete delivery.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/delivery-id"
      responses:
        "200":
          description: Delivery deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/session/{session-id}":
    get:
      tags:
        - session
      summary: Get session by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/session-id"
      responses:
        "200":
          description: Sessions received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/session"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No user session found by this id.
    delete:
      tags:
        - session
      summary: Delete user session.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/session-id"
      responses:
        "200":
          description: Sessions deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No user session found by this id.
  "/session/user/{user-id}":
    get:
      tags:
        - session
      summary: Get all user sessions.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: All user sessions received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/session"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /auth-audit-event:
    post:
      summary: Create a new authentication event.
      tags:
        - auth-audit-event
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - name: auth-event-name
          in: query
          description: Auth event name.
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created new auth audit event.
          content:
            application/json:
              example:
                id: 1
                name: successfully logging
                createDate: 00.11.2222
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags:
        - auth-audit-event
      summary: Get all a auth audit events.
      security:
        - cookie-auth: []
        - admin-role: []
      responses:
        "200":
          description: All audit events received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/auth-audit-event"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: No audit events found.
  "/auth-audit-event/{auth-audit-event-id}":
    put:
      tags:
        - auth-audit-event
      summary: Update auth audit event name by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/auth-audit-event-id"
        - name: auth-audit-event-name
          in: query
          description: Updated audit event name.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Audit event name successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/auth-audit-event"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    delete:
      tags:
        - auth-audit-event
      summary: Delete audit event by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/auth-audit-event-id"
      responses:
        "200":
          description: Audit event successfully deleted.
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          description: Audit event not found by this id.
  "/auth-audit/{auth-audit-id}":
    get:
      tags:
        - auth-audit
      summary: Get audit by id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/auth-audit-event"
      responses:
        "200":
          description: Auth audit getting.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/auth-audit"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/auth-audit/user/{user-id}":
    get:
      tags:
        - auth-audit
      summary: Get all user audits.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: All audits.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/auth-audit"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/auth-audit/user/{user-id}/session/{session-id}":
    get:
      tags:
        - auth-audit
      summary: Get user auth audits by session id.
      security:
        - cookie-auth: []
        - admin-role: []
      parameters:
        - $ref: "#/components/parameters/user-id"
        - $ref: "#/components/parameters/session-id"
      responses:
        "200":
          description: All audits received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/auth-audit"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
